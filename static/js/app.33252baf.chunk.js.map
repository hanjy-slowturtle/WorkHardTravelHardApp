{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","getItem","s","parse","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","btnText","color","TextInput","onSubmitEditing","newToDos","Date","now","onChangeText","payload","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","fontSize","fontWeight","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.33252baf.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  grey: \"#3A3D40\",\r\n  toDoBg: \"#5C5C60\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { theme } from \"./colors\";\nimport { useEffect, useState } from \"react\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  useEffect(() => {\n    loadToDos();\n  }, []);\n\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => setText(payload);\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (s !== null) {\n      setToDos(JSON.parse(s));\n    }\n  };\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = { ...toDos, [Date.now()]: { text, working } };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  const deleteToDo = (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Delete To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do?\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm sure\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              ...styles.btnText,\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              ...styles.btnText,\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        returnKeyType=\"done\"\n        value={text}\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Fontisto name=\"trash\" size={18} color=\"white\" />\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: 38,\n    fontWeight: \"600\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}